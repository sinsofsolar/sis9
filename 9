def func1(arg1, arg2):
    def func2(arg3, arg4):
        var8 = func3(arg3, arg4)
        var9 = arg4 & var8 & arg1 & arg1
        var10 = (arg3 & arg3) ^ -1499168994 + var8
        var11 = var8 ^ arg4
        var12 = var9 & var11 & var8
        var13 = var10 + (var9 & (var8 ^ arg3))
        if var9 < var9:
            var14 = (var8 | arg3) - arg2 ^ 751
        else:
            var14 = ((var12 + var8) ^ arg2) & 876
        var15 = arg1 | (arg1 - -587) | var13
        var16 = (var13 - var8) + var8 ^ var10
        var17 = var10 ^ var13
        var18 = arg3 - var13
        var19 = var13 | (-306 | arg4 & var10)
        result = var9 ^ (arg1 + (369301521 | (var12 | (var16 | var11) & var11 & var13 | (var18 & var19) ^ var19)) & -965)
        return result
    var20 = func2(arg2, arg1)
    var31 = var23(var20, arg1)
    var34 = class11()
    for var35 in xrange(25):
        var34.func12(arg2, arg1)
    var36 = arg2 + -1599630643
    var37 = var20 | arg1 & var36 | var31
    var38 = var36 ^ -171 | var36
    var39 = (var36 ^ -914) ^ var37 - 2132079546
    var40 = var39 + (arg1 ^ var20 & var37)
    var41 = (var37 + arg1) & -1584644374 - var40
    if var40 < arg1:
        var42 = arg1 & var40
    else:
        var42 = (arg1 & var40) - var20 + 837
    var43 = var39 | var40
    var44 = arg1 & var31 - arg2
    var45 = var44 ^ var37 & (var31 ^ var39)
    var46 = ((var40 | var20) & var20) & var38
    var47 = var37 | -375 + 233 & var41
    var48 = ((var44 | var40) + var20) ^ var20
    var49 = 43 + var36
    var50 = (arg2 | (var45 - var48)) ^ var31
    result = ((arg1 ^ 239 & var46) + var38) | arg1 + var40
    return result
class class11(object):
    def func12(self, arg32, arg33):
        return 0
def func7(arg24, arg25):
    var26 = func10()
    var27 = (((-1588031527 & arg24) & 1416042901 - var26 + var26) ^ arg25) + var26 ^ (arg24 - arg24 ^ arg24 - 214 | arg24) | arg25 ^ (arg25 ^ arg24)
    if arg24 < var27:
        var28 = var27 + (((-432096856 & var26) + arg25 - (arg25 ^ ((arg24 | arg25) & arg25 + var27))) | var27 | (var26 & arg24 ^ arg25 - 1459858740) | arg24) + (-1030938495 | (-147 & arg24 + -1222705183 - arg25) & -1733762321) | 733
    else:
        var28 = -2006165680 | (409 - -709415278) ^ arg25
    var29 = (arg25 ^ 644 + -720) ^ arg24 | var27
    var30 = (348 ^ var29 | arg25) & var29 | -1083315056 ^ arg24 & var27 + ((arg24 ^ arg24) ^ ((((arg25 & (340871556 | arg24)) & arg24 & var29) ^ arg24 & arg24) + var26 | var26 - arg25) + var27 - arg24) | 877606066
    result = (((var26 - -384) + (arg25 ^ arg24 ^ var29 + -1686219906) & (var27 | var27 | -856 + -1535658249)) + var30) | -1491380469
    return result
def func10():
    func8()
    result = len(xrange(31))
    func9()
    return result
def func9():
    global len
    del len
def func8():
    global len
    len = lambda x : -1
def func6():
    closure = [4]
    def func5(arg21, arg22):
        closure[0] += func7(arg21, arg22)
        return closure[0]
    func = func5
    return func
var23 = func6()
def func3(arg5, arg6):
    def func4(acc, rest):
        var7 = rest ^ -1 & 6
        if acc == 0:
            return var7
        else:
            result = func4(acc - 1, var7)
            return result
    result = func4(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 13'
    print 'arg_number: 51'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    def func2(arg3, arg4):
        var8 = func3(arg3, arg4)
        var9 = arg4 & var8 & arg1 & arg1
        var10 = (arg3 & arg3) ^ -1499168994 + var8
        var11 = var8 ^ arg4
        var12 = var9 & var11 & var8
        var13 = var10 + (var9 & (var8 ^ arg3))
        if var9 < var9:
            var14 = (var8 | arg3) - arg2 ^ 751
        else:
            var14 = ((var12 + var8) ^ arg2) & 876
        var15 = arg1 | (arg1 - -587) | var13
        var16 = (var13 - var8) + var8 ^ var10
        var17 = var10 ^ var13
        var18 = arg3 - var13
        var19 = var13 | (-306 | arg4 & var10)
        result = var9 ^ (arg1 + (369301521 | (var12 | (var16 | var11) & var11 & var13 | (var18 & var19) ^ var19)) & -965)
        return result
    var20 = func2(arg2, arg1)
    var31 = var23(var20, arg1)
    var34 = class11()
    for var35 in xrange(25):
        var34.func12(arg2, arg1)
    var36 = arg2 + -1599630643
    var37 = var20 | arg1 & var36 | var31
    var38 = var36 ^ -171 | var36
    var39 = (var36 ^ -914) ^ var37 - 2132079546
    var40 = var39 + (arg1 ^ var20 & var37)
    var41 = (var37 + arg1) & -1584644374 - var40
    if var40 < arg1:
        var42 = arg1 & var40
    else:
        var42 = (arg1 & var40) - var20 + 837
    var43 = var39 | var40
    var44 = arg1 & var31 - arg2
    var45 = var44 ^ var37 & (var31 ^ var39)
    var46 = ((var40 | var20) & var20) & var38
    var47 = var37 | -375 + 233 & var41
    var48 = ((var44 | var40) + var20) ^ var20
    var49 = 43 + var36
    var50 = (arg2 | (var45 - var48)) ^ var31
    result = ((arg1 ^ 239 & var46) + var38) | arg1 + var40
    return result
class class11(object):
    def func12(self, arg32, arg33):
        return 0
def func7(arg24, arg25):
    var26 = func10()
    var27 = (((-1588031527 & arg24) & 1416042901 - var26 + var26) ^ arg25) + var26 ^ (arg24 - arg24 ^ arg24 - 214 | arg24) | arg25 ^ (arg25 ^ arg24)
    if arg24 < var27:
        var28 = var27 + (((-432096856 & var26) + arg25 - (arg25 ^ ((arg24 | arg25) & arg25 + var27))) | var27 | (var26 & arg24 ^ arg25 - 1459858740) | arg24) + (-1030938495 | (-147 & arg24 + -1222705183 - arg25) & -1733762321) | 733
    else:
        var28 = -2006165680 | (409 - -709415278) ^ arg25
    var29 = (arg25 ^ 644 + -720) ^ arg24 | var27
    var30 = (348 ^ var29 | arg25) & var29 | -1083315056 ^ arg24 & var27 + ((arg24 ^ arg24) ^ ((((arg25 & (340871556 | arg24)) & arg24 & var29) ^ arg24 & arg24) + var26 | var26 - arg25) + var27 - arg24) | 877606066
    result = (((var26 - -384) + (arg25 ^ arg24 ^ var29 + -1686219906) & (var27 | var27 | -856 + -1535658249)) + var30) | -1491380469
    return result
def func10():
    func8()
    result = len(xrange(31))
    func9()
    return result
def func9():
    global len
    del len
def func8():
    global len
    len = lambda x : -1
def func6():
    closure = [4]
    def func5(arg21, arg22):
        closure[0] += func7(arg21, arg22)
        return closure[0]
    func = func5
    return func
var23 = func6()
def func3(arg5, arg6):
    def func4(acc, rest):
        var7 = rest ^ -1 & 6
        if acc == 0:
            return var7
        else:
            result = func4(acc - 1, var7)
            return result
    result = func4(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 13'
    print 'arg_number: 51'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    def func2(arg3, arg4):
        var8 = func3(arg3, arg4)
        var9 = arg4 & var8 & arg1 & arg1
        var10 = (arg3 & arg3) ^ -1499168994 + var8
        var11 = var8 ^ arg4
        var12 = var9 & var11 & var8
        var13 = var10 + (var9 & (var8 ^ arg3))
        if var9 < var9:
            var14 = (var8 | arg3) - arg2 ^ 751
        else:
            var14 = ((var12 + var8) ^ arg2) & 876
        var15 = arg1 | (arg1 - -587) | var13
        var16 = (var13 - var8) + var8 ^ var10
        var17 = var10 ^ var13
        var18 = arg3 - var13
        var19 = var13 | (-306 | arg4 & var10)
        result = var9 ^ (arg1 + (369301521 | (var12 | (var16 | var11) & var11 & var13 | (var18 & var19) ^ var19)) & -965)
        return result
    var20 = func2(arg2, arg1)
    var31 = var23(var20, arg1)
    var34 = class11()
    for var35 in xrange(25):
        var34.func12(arg2, arg1)
    var36 = arg2 + -1599630643
    var37 = var20 | arg1 & var36 | var31
    var38 = var36 ^ -171 | var36
    var39 = (var36 ^ -914) ^ var37 - 2132079546
    var40 = var39 + (arg1 ^ var20 & var37)
    var41 = (var37 + arg1) & -1584644374 - var40
    if var40 < arg1:
        var42 = arg1 & var40
    else:
        var42 = (arg1 & var40) - var20 + 837
    var43 = var39 | var40
    var44 = arg1 & var31 - arg2
    var45 = var44 ^ var37 & (var31 ^ var39)
    var46 = ((var40 | var20) & var20) & var38
    var47 = var37 | -375 + 233 & var41
    var48 = ((var44 | var40) + var20) ^ var20
    var49 = 43 + var36
    var50 = (arg2 | (var45 - var48)) ^ var31
    result = ((arg1 ^ 239 & var46) + var38) | arg1 + var40
    return result
class class11(object):
    def func12(self, arg32, arg33):
        return 0
def func7(arg24, arg25):
    var26 = func10()
    var27 = (((-1588031527 & arg24) & 1416042901 - var26 + var26) ^ arg25) + var26 ^ (arg24 - arg24 ^ arg24 - 214 | arg24) | arg25 ^ (arg25 ^ arg24)
    if arg24 < var27:
        var28 = var27 + (((-432096856 & var26) + arg25 - (arg25 ^ ((arg24 | arg25) & arg25 + var27))) | var27 | (var26 & arg24 ^ arg25 - 1459858740) | arg24) + (-1030938495 | (-147 & arg24 + -1222705183 - arg25) & -1733762321) | 733
    else:
        var28 = -2006165680 | (409 - -709415278) ^ arg25
    var29 = (arg25 ^ 644 + -720) ^ arg24 | var27
    var30 = (348 ^ var29 | arg25) & var29 | -1083315056 ^ arg24 & var27 + ((arg24 ^ arg24) ^ ((((arg25 & (340871556 | arg24)) & arg24 & var29) ^ arg24 & arg24) + var26 | var26 - arg25) + var27 - arg24) | 877606066
    result = (((var26 - -384) + (arg25 ^ arg24 ^ var29 + -1686219906) & (var27 | var27 | -856 + -1535658249)) + var30) | -1491380469
    return result
def func10():
    func8()
    result = len(xrange(31))
    func9()
    return result
def func9():
    global len
    del len
def func8():
    global len
    len = lambda x : -1
def func6():
    closure = [4]
    def func5(arg21, arg22):
        closure[0] += func7(arg21, arg22)
        return closure[0]
    func = func5
    return func
var23 = func6()
def func3(arg5, arg6):
    def func4(acc, rest):
        var7 = rest ^ -1 & 6
        if acc == 0:
            return var7
        else:
            result = func4(acc - 1, var7)
            return result
    result = func4(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 13'
    print 'arg_number: 51'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    def func2(arg3, arg4):
        var8 = func3(arg3, arg4)
        var9 = arg4 & var8 & arg1 & arg1
        var10 = (arg3 & arg3) ^ -1499168994 + var8
        var11 = var8 ^ arg4
        var12 = var9 & var11 & var8
        var13 = var10 + (var9 & (var8 ^ arg3))
        if var9 < var9:
            var14 = (var8 | arg3) - arg2 ^ 751
        else:
            var14 = ((var12 + var8) ^ arg2) & 876
        var15 = arg1 | (arg1 - -587) | var13
        var16 = (var13 - var8) + var8 ^ var10
        var17 = var10 ^ var13
        var18 = arg3 - var13
        var19 = var13 | (-306 | arg4 & var10)
        result = var9 ^ (arg1 + (369301521 | (var12 | (var16 | var11) & var11 & var13 | (var18 & var19) ^ var19)) & -965)
        return result
    var20 = func2(arg2, arg1)
    var31 = var23(var20, arg1)
    var34 = class11()
    for var35 in xrange(25):
        var34.func12(arg2, arg1)
    var36 = arg2 + -1599630643
    var37 = var20 | arg1 & var36 | var31
    var38 = var36 ^ -171 | var36
    var39 = (var36 ^ -914) ^ var37 - 2132079546
    var40 = var39 + (arg1 ^ var20 & var37)
    var41 = (var37 + arg1) & -1584644374 - var40
    if var40 < arg1:
        var42 = arg1 & var40
    else:
        var42 = (arg1 & var40) - var20 + 837
    var43 = var39 | var40
    var44 = arg1 & var31 - arg2
    var45 = var44 ^ var37 & (var31 ^ var39)
    var46 = ((var40 | var20) & var20) & var38
    var47 = var37 | -375 + 233 & var41
    var48 = ((var44 | var40) + var20) ^ var20
    var49 = 43 + var36
    var50 = (arg2 | (var45 - var48)) ^ var31
    result = ((arg1 ^ 239 & var46) + var38) | arg1 + var40
    return result
class class11(object):
    def func12(self, arg32, arg33):
        return 0
def func7(arg24, arg25):
    var26 = func10()
    var27 = (((-1588031527 & arg24) & 1416042901 - var26 + var26) ^ arg25) + var26 ^ (arg24 - arg24 ^ arg24 - 214 | arg24) | arg25 ^ (arg25 ^ arg24)
    if arg24 < var27:
        var28 = var27 + (((-432096856 & var26) + arg25 - (arg25 ^ ((arg24 | arg25) & arg25 + var27))) | var27 | (var26 & arg24 ^ arg25 - 1459858740) | arg24) + (-1030938495 | (-147 & arg24 + -1222705183 - arg25) & -1733762321) | 733
    else:
        var28 = -2006165680 | (409 - -709415278) ^ arg25
    var29 = (arg25 ^ 644 + -720) ^ arg24 | var27
    var30 = (348 ^ var29 | arg25) & var29 | -1083315056 ^ arg24 & var27 + ((arg24 ^ arg24) ^ ((((arg25 & (340871556 | arg24)) & arg24 & var29) ^ arg24 & arg24) + var26 | var26 - arg25) + var27 - arg24) | 877606066
    result = (((var26 - -384) + (arg25 ^ arg24 ^ var29 + -1686219906) & (var27 | var27 | -856 + -1535658249)) + var30) | -1491380469
    return result
def func10():
    func8()
    result = len(xrange(31))
    func9()
    return result
def func9():
    global len
    del len
def func8():
    global len
    len = lambda x : -1
def func6():
    closure = [4]
    def func5(arg21, arg22):
        closure[0] += func7(arg21, arg22)
        return closure[0]
    func = func5
    return func
var23 = func6()
def func3(arg5, arg6):
    def func4(acc, rest):
        var7 = rest ^ -1 & 6
        if acc == 0:
            return var7
        else:
            result = func4(acc - 1, var7)
            return result
    result = func4(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 13'
    print 'arg_number: 51'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    def func2(arg3, arg4):
        var8 = func3(arg3, arg4)
        var9 = arg4 & var8 & arg1 & arg1
        var10 = (arg3 & arg3) ^ -1499168994 + var8
        var11 = var8 ^ arg4
        var12 = var9 & var11 & var8
        var13 = var10 + (var9 & (var8 ^ arg3))
        if var9 < var9:
            var14 = (var8 | arg3) - arg2 ^ 751
        else:
            var14 = ((var12 + var8) ^ arg2) & 876
        var15 = arg1 | (arg1 - -587) | var13
        var16 = (var13 - var8) + var8 ^ var10
        var17 = var10 ^ var13
        var18 = arg3 - var13
        var19 = var13 | (-306 | arg4 & var10)
        result = var9 ^ (arg1 + (369301521 | (var12 | (var16 | var11) & var11 & var13 | (var18 & var19) ^ var19)) & -965)
        return result
    var20 = func2(arg2, arg1)
    var31 = var23(var20, arg1)
    var34 = class11()
    for var35 in xrange(25):
        var34.func12(arg2, arg1)
    var36 = arg2 + -1599630643
    var37 = var20 | arg1 & var36 | var31
    var38 = var36 ^ -171 | var36
    var39 = (var36 ^ -914) ^ var37 - 2132079546
    var40 = var39 + (arg1 ^ var20 & var37)
    var41 = (var37 + arg1) & -1584644374 - var40
    if var40 < arg1:
        var42 = arg1 & var40
    else:
        var42 = (arg1 & var40) - var20 + 837
    var43 = var39 | var40
    var44 = arg1 & var31 - arg2
    var45 = var44 ^ var37 & (var31 ^ var39)
    var46 = ((var40 | var20) & var20) & var38
    var47 = var37 | -375 + 233 & var41
    var48 = ((var44 | var40) + var20) ^ var20
    var49 = 43 + var36
    var50 = (arg2 | (var45 - var48)) ^ var31
    result = ((arg1 ^ 239 & var46) + var38) | arg1 + var40
    return result
class class11(object):
    def func12(self, arg32, arg33):
        return 0
def func7(arg24, arg25):
    var26 = func10()
    var27 = (((-1588031527 & arg24) & 1416042901 - var26 + var26) ^ arg25) + var26 ^ (arg24 - arg24 ^ arg24 - 214 | arg24) | arg25 ^ (arg25 ^ arg24)
    if arg24 < var27:
        var28 = var27 + (((-432096856 & var26) + arg25 - (arg25 ^ ((arg24 | arg25) & arg25 + var27))) | var27 | (var26 & arg24 ^ arg25 - 1459858740) | arg24) + (-1030938495 | (-147 & arg24 + -1222705183 - arg25) & -1733762321) | 733
    else:
        var28 = -2006165680 | (409 - -709415278) ^ arg25
    var29 = (arg25 ^ 644 + -720) ^ arg24 | var27
    var30 = (348 ^ var29 | arg25) & var29 | -1083315056 ^ arg24 & var27 + ((arg24 ^ arg24) ^ ((((arg25 & (340871556 | arg24)) & arg24 & var29) ^ arg24 & arg24) + var26 | var26 - arg25) + var27 - arg24) | 877606066
    result = (((var26 - -384) + (arg25 ^ arg24 ^ var29 + -1686219906) & (var27 | var27 | -856 + -1535658249)) + var30) | -1491380469
    return result
def func10():
    func8()
    result = len(xrange(31))
    func9()
    return result
def func9():
    global len
    del len
def func8():
    global len
    len = lambda x : -1
def func6():
    closure = [4]
    def func5(arg21, arg22):
        closure[0] += func7(arg21, arg22)
        return closure[0]
    func = func5
    return func
var23 = func6()
def func3(arg5, arg6):
    def func4(acc, rest):
        var7 = rest ^ -1 & 6
        if acc == 0:
            return var7
        else:
            result = func4(acc - 1, var7)
            return result
    result = func4(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 13'
    print 'arg_number: 51'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    def func2(arg3, arg4):
        var8 = func3(arg3, arg4)
        var9 = arg4 & var8 & arg1 & arg1
        var10 = (arg3 & arg3) ^ -1499168994 + var8
        var11 = var8 ^ arg4
        var12 = var9 & var11 & var8
        var13 = var10 + (var9 & (var8 ^ arg3))
        if var9 < var9:
            var14 = (var8 | arg3) - arg2 ^ 751
        else:
            var14 = ((var12 + var8) ^ arg2) & 876
        var15 = arg1 | (arg1 - -587) | var13
        var16 = (var13 - var8) + var8 ^ var10
        var17 = var10 ^ var13
        var18 = arg3 - var13
        var19 = var13 | (-306 | arg4 & var10)
        result = var9 ^ (arg1 + (369301521 | (var12 | (var16 | var11) & var11 & var13 | (var18 & var19) ^ var19)) & -965)
        return result
    var20 = func2(arg2, arg1)
    var31 = var23(var20, arg1)
    var34 = class11()
    for var35 in xrange(25):
        var34.func12(arg2, arg1)
    var36 = arg2 + -1599630643
    var37 = var20 | arg1 & var36 | var31
    var38 = var36 ^ -171 | var36
    var39 = (var36 ^ -914) ^ var37 - 2132079546
    var40 = var39 + (arg1 ^ var20 & var37)
    var41 = (var37 + arg1) & -1584644374 - var40
    if var40 < arg1:
        var42 = arg1 & var40
    else:
        var42 = (arg1 & var40) - var20 + 837
    var43 = var39 | var40
    var44 = arg1 & var31 - arg2
    var45 = var44 ^ var37 & (var31 ^ var39)
    var46 = ((var40 | var20) & var20) & var38
    var47 = var37 | -375 + 233 & var41
    var48 = ((var44 | var40) + var20) ^ var20
    var49 = 43 + var36
    var50 = (arg2 | (var45 - var48)) ^ var31
    result = ((arg1 ^ 239 & var46) + var38) | arg1 + var40
    return result
class class11(object):
    def func12(self, arg32, arg33):
        return 0
def func7(arg24, arg25):
    var26 = func10()
    var27 = (((-1588031527 & arg24) & 1416042901 - var26 + var26) ^ arg25) + var26 ^ (arg24 - arg24 ^ arg24 - 214 | arg24) | arg25 ^ (arg25 ^ arg24)
    if arg24 < var27:
        var28 = var27 + (((-432096856 & var26) + arg25 - (arg25 ^ ((arg24 | arg25) & arg25 + var27))) | var27 | (var26 & arg24 ^ arg25 - 1459858740) | arg24) + (-1030938495 | (-147 & arg24 + -1222705183 - arg25) & -1733762321) | 733
    else:
        var28 = -2006165680 | (409 - -709415278) ^ arg25
    var29 = (arg25 ^ 644 + -720) ^ arg24 | var27
    var30 = (348 ^ var29 | arg25) & var29 | -1083315056 ^ arg24 & var27 + ((arg24 ^ arg24) ^ ((((arg25 & (340871556 | arg24)) & arg24 & var29) ^ arg24 & arg24) + var26 | var26 - arg25) + var27 - arg24) | 877606066
    result = (((var26 - -384) + (arg25 ^ arg24 ^ var29 + -1686219906) & (var27 | var27 | -856 + -1535658249)) + var30) | -1491380469
    return result
def func10():
    func8()
    result = len(xrange(31))
    func9()
    return result
def func9():
    global len
    del len
def func8():
    global len
    len = lambda x : -1
def func6():
    closure = [4]
    def func5(arg21, arg22):
        closure[0] += func7(arg21, arg22)
        return closure[0]
    func = func5
    return func
var23 = func6()
def func3(arg5, arg6):
    def func4(acc, rest):
        var7 = rest ^ -1 & 6
        if acc == 0:
            return var7
        else:
            result = func4(acc - 1, var7)
            return result
    result = func4(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 13'
    print 'arg_number: 51'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    def func2(arg3, arg4):
        var8 = func3(arg3, arg4)
        var9 = arg4 & var8 & arg1 & arg1
        var10 = (arg3 & arg3) ^ -1499168994 + var8
        var11 = var8 ^ arg4
        var12 = var9 & var11 & var8
        var13 = var10 + (var9 & (var8 ^ arg3))
        if var9 < var9:
            var14 = (var8 | arg3) - arg2 ^ 751
        else:
            var14 = ((var12 + var8) ^ arg2) & 876
        var15 = arg1 | (arg1 - -587) | var13
        var16 = (var13 - var8) + var8 ^ var10
        var17 = var10 ^ var13
        var18 = arg3 - var13
        var19 = var13 | (-306 | arg4 & var10)
        result = var9 ^ (arg1 + (369301521 | (var12 | (var16 | var11) & var11 & var13 | (var18 & var19) ^ var19)) & -965)
        return result
    var20 = func2(arg2, arg1)
    var31 = var23(var20, arg1)
    var34 = class11()
    for var35 in xrange(25):
        var34.func12(arg2, arg1)
    var36 = arg2 + -1599630643
    var37 = var20 | arg1 & var36 | var31
    var38 = var36 ^ -171 | var36
    var39 = (var36 ^ -914) ^ var37 - 2132079546
    var40 = var39 + (arg1 ^ var20 & var37)
    var41 = (var37 + arg1) & -1584644374 - var40
    if var40 < arg1:
        var42 = arg1 & var40
    else:
        var42 = (arg1 & var40) - var20 + 837
    var43 = var39 | var40
    var44 = arg1 & var31 - arg2
    var45 = var44 ^ var37 & (var31 ^ var39)
    var46 = ((var40 | var20) & var20) & var38
    var47 = var37 | -375 + 233 & var41
    var48 = ((var44 | var40) + var20) ^ var20
    var49 = 43 + var36
    var50 = (arg2 | (var45 - var48)) ^ var31
    result = ((arg1 ^ 239 & var46) + var38) | arg1 + var40
    return result
class class11(object):
    def func12(self, arg32, arg33):
        return 0
def func7(arg24, arg25):
    var26 = func10()
    var27 = (((-1588031527 & arg24) & 1416042901 - var26 + var26) ^ arg25) + var26 ^ (arg24 - arg24 ^ arg24 - 214 | arg24) | arg25 ^ (arg25 ^ arg24)
    if arg24 < var27:
        var28 = var27 + (((-432096856 & var26) + arg25 - (arg25 ^ ((arg24 | arg25) & arg25 + var27))) | var27 | (var26 & arg24 ^ arg25 - 1459858740) | arg24) + (-1030938495 | (-147 & arg24 + -1222705183 - arg25) & -1733762321) | 733
    else:
        var28 = -2006165680 | (409 - -709415278) ^ arg25
    var29 = (arg25 ^ 644 + -720) ^ arg24 | var27
    var30 = (348 ^ var29 | arg25) & var29 | -1083315056 ^ arg24 & var27 + ((arg24 ^ arg24) ^ ((((arg25 & (340871556 | arg24)) & arg24 & var29) ^ arg24 & arg24) + var26 | var26 - arg25) + var27 - arg24) | 877606066
    result = (((var26 - -384) + (arg25 ^ arg24 ^ var29 + -1686219906) & (var27 | var27 | -856 + -1535658249)) + var30) | -1491380469
    return result
def func10():
    func8()
    result = len(xrange(31))
    func9()
    return result
def func9():
    global len
    del len
def func8():
    global len
    len = lambda x : -1
def func6():
    closure = [4]
    def func5(arg21, arg22):
        closure[0] += func7(arg21, arg22)
        return closure[0]
    func = func5
    return func
var23 = func6()
def func3(arg5, arg6):
    def func4(acc, rest):
        var7 = rest ^ -1 & 6
        if acc == 0:
            return var7
        else:
            result = func4(acc - 1, var7)
            return result
    result = func4(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 13'
    print 'arg_number: 51'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    def func2(arg3, arg4):
        var8 = func3(arg3, arg4)
        var9 = arg4 & var8 & arg1 & arg1
        var10 = (arg3 & arg3) ^ -1499168994 + var8
        var11 = var8 ^ arg4
        var12 = var9 & var11 & var8
        var13 = var10 + (var9 & (var8 ^ arg3))
        if var9 < var9:
            var14 = (var8 | arg3) - arg2 ^ 751
        else:
            var14 = ((var12 + var8) ^ arg2) & 876
        var15 = arg1 | (arg1 - -587) | var13
        var16 = (var13 - var8) + var8 ^ var10
        var17 = var10 ^ var13
        var18 = arg3 - var13
        var19 = var13 | (-306 | arg4 & var10)
        result = var9 ^ (arg1 + (369301521 | (var12 | (var16 | var11) & var11 & var13 | (var18 & var19) ^ var19)) & -965)
        return result
    var20 = func2(arg2, arg1)
    var31 = var23(var20, arg1)
    var34 = class11()
    for var35 in xrange(25):
        var34.func12(arg2, arg1)
    var36 = arg2 + -1599630643
    var37 = var20 | arg1 & var36 | var31
    var38 = var36 ^ -171 | var36
    var39 = (var36 ^ -914) ^ var37 - 2132079546
    var40 = var39 + (arg1 ^ var20 & var37)
    var41 = (var37 + arg1) & -1584644374 - var40
    if var40 < arg1:
        var42 = arg1 & var40
    else:
        var42 = (arg1 & var40) - var20 + 837
    var43 = var39 | var40
    var44 = arg1 & var31 - arg2
    var45 = var44 ^ var37 & (var31 ^ var39)
    var46 = ((var40 | var20) & var20) & var38
    var47 = var37 | -375 + 233 & var41
    var48 = ((var44 | var40) + var20) ^ var20
    var49 = 43 + var36
    var50 = (arg2 | (var45 - var48)) ^ var31
    result = ((arg1 ^ 239 & var46) + var38) | arg1 + var40
    return result
class class11(object):
    def func12(self, arg32, arg33):
        return 0
def func7(arg24, arg25):
    var26 = func10()
    var27 = (((-1588031527 & arg24) & 1416042901 - var26 + var26) ^ arg25) + var26 ^ (arg24 - arg24 ^ arg24 - 214 | arg24) | arg25 ^ (arg25 ^ arg24)
    if arg24 < var27:
        var28 = var27 + (((-432096856 & var26) + arg25 - (arg25 ^ ((arg24 | arg25) & arg25 + var27))) | var27 | (var26 & arg24 ^ arg25 - 1459858740) | arg24) + (-1030938495 | (-147 & arg24 + -1222705183 - arg25) & -1733762321) | 733
    else:
        var28 = -2006165680 | (409 - -709415278) ^ arg25
    var29 = (arg25 ^ 644 + -720) ^ arg24 | var27
    var30 = (348 ^ var29 | arg25) & var29 | -1083315056 ^ arg24 & var27 + ((arg24 ^ arg24) ^ ((((arg25 & (340871556 | arg24)) & arg24 & var29) ^ arg24 & arg24) + var26 | var26 - arg25) + var27 - arg24) | 877606066
    result = (((var26 - -384) + (arg25 ^ arg24 ^ var29 + -1686219906) & (var27 | var27 | -856 + -1535658249)) + var30) | -1491380469
    return result
def func10():
    func8()
    result = len(xrange(31))
    func9()
    return result
def func9():
    global len
    del len
def func8():
    global len
    len = lambda x : -1
def func6():
    closure = [4]
    def func5(arg21, arg22):
        closure[0] += func7(arg21, arg22)
        return closure[0]
    func = func5
    return func
var23 = func6()
def func3(arg5, arg6):
    def func4(acc, rest):
        var7 = rest ^ -1 & 6
        if acc == 0:
            return var7
        else:
            result = func4(acc - 1, var7)
            return result
    result = func4(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 13'
    print 'arg_number: 51'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
